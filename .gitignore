# =========================================================================
# A comprehensive .gitignore for a Rust project
# =========================================================================

# Rust & Cargo
# -------------------------------------------------------------------------
# The 'target' directory contains all compiled artifacts, dependencies, and
# build caches. It can be regenerated by running 'cargo build' and should
# never be committed to version control.
/target/

# The Cargo.lock file ensures reproducible builds by locking dependency versions.
# For binary/application projects (like this one), it's best practice to
# COMMIT this file, so it is NOT ignored.
# For library projects, you might consider ignoring it.

# Generated documentation (usually in target/doc, but can be explicit)
/doc/

# Backup files created by some editors
*.rs.bk


# IDE & Editor Configuration
# -------------------------------------------------------------------------
# These files store user-specific settings and should not be shared.
# VS Code
.vscode/

# JetBrains (RustRover, CLion, IntelliJ)
.idea/

# Vim
*.swp
*~

# Emacs
*#
.#*

# Sublime Text
*.sublime-project
*.sublime-workspace


# Operating System Files
# -------------------------------------------------------------------------
# These are metadata files created by the OS and have no place in a repo.
# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini


# Logs, Data, and Tooling
# -------------------------------------------------------------------------
# Ignore log files, test data, and reports from various tools.
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Code coverage reports
/coverage/
*.lcov
lcov.info


# Secrets & Environment Variables
# -------------------------------------------------------------------------
# CRITICAL: Never commit secrets, API keys, or other sensitive data.
# Use .env files for local development and environment variables in production.
# The ! rule is used to make an exception for an example file.
.env
.env.*
!/.env.example


# Miscellaneous
# -------------------------------------------------------------------------
# Compiled binary in the root directory (if not using cargo run)
# The name 'kryc' is based on your project's binary name.
kryc
kryc.exe

# Build directory for other build systems
/build/
/dist/
