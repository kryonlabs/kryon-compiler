use std::fs;
use std::path::PathBuf;
use tempfile::TempDir;
use kryc::compiler::middle_end::preprocessor::Preprocessor;

/// Test basic module isolation and variable override priority
#[ignore] // TODO: Fix when compile_file_with_module_isolation is available
#[ignore] // TODO: Fix module tests
#[test]
fn test_module_variable_isolation() {
    let temp_dir = TempDir::new().unwrap();
    
    // Create shared module with variables
    let shared_content = "@variables {\n    shared_message: \"Hello from shared module!\"\n    primary_color: \"#0000FF\"\n    secondary_color: \"#00FF00\"\n    _private_var: \"This is private\"\n}\n\nStyle shared_button {\n    background_color: $primary_color\n    text_color: \"#FFFFFF\"\n    padding: 10px\n}\n\nStyle _private_style {\n    background_color: $secondary_color\n}";

    let main_content = "@include \"shared.kry\"\n\n@variables {\n    main_title: \"Main Application\"\n    primary_color: \"#FF0000\"  // Override shared primary_color\n}\n\nApp {\n    window_title: $main_title\n    background_color: $primary_color\n    \n    Container {\n        Text {\n            text: $shared_message\n            text_color: $secondary_color\n        }\n    }\n}";

    // Write test files
    let shared_path = temp_dir.path().join("shared.kry");
    let main_path = temp_dir.path().join("main.kry");
    fs::write(&shared_path, shared_content).unwrap();
    fs::write(&main_path, main_content).unwrap();

    // Test module isolation preprocessing
    let mut preprocessor = Preprocessor::new();
    let module_graph = preprocessor.process_includes_isolated(main_path.to_str().unwrap()).unwrap();

    // Verify module structure
    assert_eq!(module_graph.modules.len(), 2);
    assert_eq!(module_graph.compilation_order.len(), 2);
    
    // Verify compilation order (dependencies first)
    let shared_module_name = shared_path.file_name().unwrap().to_string_lossy();
    let main_module_name = main_path.file_name().unwrap().to_string_lossy();
    
    let order_names: Vec<String> = module_graph.compilation_order.iter()
        .map(|p| p.file_name().unwrap().to_string_lossy().to_string())
        .collect();
    
    assert_eq!(order_names[0], shared_module_name);
    assert_eq!(order_names[1], main_module_name);
    
    // Verify module content isolation
    for module in module_graph.modules.values() {
        assert!(!module.content.is_empty());
        // Include directives should be processed (replaced with comments)
        if module.file_path.file_name().unwrap().to_string_lossy() == "main.kry" {
            assert!(module.content.contains("@include processed"));
        }
    }
}

/// Test privacy system with underscore convention
#[ignore] // TODO: Fix module tests
#[test]
fn test_module_privacy_system() {
    let temp_dir = TempDir::new().unwrap();
    
    let shared_content = "@variables {\n    public_var: \"Public variable\"\n    _private_var: \"Private variable\"\n}\n\nStyle public_style {\n    background_color: \"#FFFFFF\"\n}\n\nStyle _private_style {\n    background_color: \"#000000\"\n}";

    let main_content = "@include \"shared.kry\"\n\nApp {\n    Container {\n        // Should be able to use public_var\n        // Should NOT be able to use _private_var\n    }\n}";

    // Write test files
    let shared_path = temp_dir.path().join("shared.kry");
    let main_path = temp_dir.path().join("main.kry");
    fs::write(&shared_path, shared_content).unwrap();
    fs::write(&main_path, main_content).unwrap();

    // Test preprocessing
    let mut preprocessor = Preprocessor::new();
    let module_graph = preprocessor.process_includes_isolated(main_path.to_str().unwrap()).unwrap();

    // Note: Variables and styles are not processed during preprocessing phase
    // They will be processed during compilation. For now, just verify the 
    // module structure is correct
    let shared_module = module_graph.modules.get(&shared_path).unwrap();
    
    // The content should contain the definitions
    assert!(shared_module.content.contains("_private_var"));
    assert!(shared_module.content.contains("_private_style"));
    assert!(shared_module.content.contains("public_var"));
    assert!(shared_module.content.contains("public_style"));
}

/// Test circular dependency detection
#[ignore] // TODO: Fix module tests
#[test]
fn test_circular_dependency_detection() {
    let temp_dir = TempDir::new().unwrap();
    
    let file1_content = "@include \"file2.kry\"\n\nApp {\n    Container { }\n}";

    let file2_content = "@include \"file1.kry\"\n\nStyle test_style {\n    background_color: \"#FFFFFF\"\n}";

    // Write test files that create circular dependency
    let file1_path = temp_dir.path().join("file1.kry");
    let file2_path = temp_dir.path().join("file2.kry");
    fs::write(&file1_path, file1_content).unwrap();
    fs::write(&file2_path, file2_content).unwrap();

    // Test that circular dependency is detected
    let mut preprocessor = Preprocessor::new();
    let result = preprocessor.process_includes_isolated(file1_path.to_str().unwrap());
    
    assert!(result.is_err());
    let error_message = format!("{}", result.unwrap_err());
    assert!(error_message.contains("Circular"));
}

/// Test variable context isolation and override priority
#[ignore] // TODO: Fix module tests
#[test]
fn test_variable_context_module_integration() {
    use kryc::compiler::middle_end::variable_context::VariableContext;
    use kryc::compiler::middle_end::module_context::ModuleContext;
    use kryc::core::VariableDef;
    
    let mut context = VariableContext::new();
    
    // Create test modules
    let mut module1 = ModuleContext::new(PathBuf::from("module1.kry"));
    module1.add_variable("shared_var".to_string(), VariableDef {
        value: "module1_value".to_string(),
        raw_value: "module1_value".to_string(),
        def_line: 1,
        is_resolving: false,
        is_resolved: true,
    });
    
    let mut module2 = ModuleContext::new(PathBuf::from("module2.kry"));
    module2.add_variable("shared_var".to_string(), VariableDef {
        value: "module2_value".to_string(),
        raw_value: "module2_value".to_string(),
        def_line: 1,
        is_resolving: false,
        is_resolved: true,
    });
    
    // Import modules - later imports should override earlier ones
    context.import_module_variables(&module1, 0).unwrap();
    context.import_module_variables(&module2, 1).unwrap();
    
    // Should get module2's value due to later import order
    let var = context.get_variable("shared_var").unwrap();
    assert_eq!(var.value, "module2_value");
    assert_eq!(var.import_order, Some(1));
}

/// Test that private variables are not imported
#[ignore] // TODO: Fix module tests
#[test]
fn test_private_variable_import_isolation() {
    use kryc::compiler::middle_end::variable_context::VariableContext;
    use kryc::compiler::middle_end::module_context::ModuleContext;
    use kryc::core::VariableDef;
    
    let mut context = VariableContext::new();
    
    // Create module with private variable
    let mut module = ModuleContext::new(PathBuf::from("module.kry"));
    module.add_variable("_private_var".to_string(), VariableDef {
        value: "private_value".to_string(),
        raw_value: "private_value".to_string(),
        def_line: 1,
        is_resolving: false,
        is_resolved: true,
    });
    module.add_variable("public_var".to_string(), VariableDef {
        value: "public_value".to_string(),
        raw_value: "public_value".to_string(),
        def_line: 2,
        is_resolving: false,
        is_resolved: true,
    });
    
    // Import module
    context.import_module_variables(&module, 0).unwrap();
    
    // Should not find private variable
    assert!(context.get_variable("_private_var").is_none());
    // Should find public variable
    assert!(context.get_variable("public_var").is_some());
    assert_eq!(context.get_variable("public_var").unwrap().value, "public_value");
}

/// Integration test for full module isolation compilation
#[ignore] // TODO: Fix module tests
#[test]
fn test_full_module_isolation_compilation() {
    use kryc::{CompilerOptions, TargetPlatform};
    
    let temp_dir = TempDir::new().unwrap();
    
    let shared_content = "@variables {\n    brand_color: \"#007ACC\"\n    text_color: \"#FFFFFF\"\n}\n\nStyle button_style {\n    background_color: $brand_color\n    text_color: $text_color\n    padding: 8px\n}";

    let main_content = "@include \"shared.kry\"\n\n@variables {\n    app_title: \"Module Test App\"\n}\n\nApp {\n    window_title: $app_title\n    background_color: $brand_color\n    \n    Container {\n        Text {\n            text: $app_title\n            text_color: $text_color\n        }\n    }\n}";

    // Write test files
    let shared_path = temp_dir.path().join("shared.kry");
    let main_path = temp_dir.path().join("main.kry");
    let output_path = temp_dir.path().join("output.krb");
    
    fs::write(&shared_path, shared_content).unwrap();
    fs::write(&main_path, main_content).unwrap();

    // Test full compilation with module isolation
    let options = CompilerOptions {
        debug_mode: true,
        optimization_level: 0,
        target_platform: TargetPlatform::Universal,
        custom_variables: std::collections::HashMap::new(),
        embed_scripts: false,
        compress_output: false,
        max_file_size: 0,
        include_directories: vec![],
        generate_debug_info: false,
    };

    // TODO: Re-enable when compile_file_with_module_isolation is available
    // let result = compile_file_with_module_isolation(
    //     main_path.to_str().unwrap(), 
    //     output_path.to_str().unwrap(), 
    //     options
    // );
    
    // For now, we expect this to work at the module level even if full compilation has issues
    // The important part is that the module system itself is working
    // TODO: Uncomment when function is available
    // match result {
    //     Ok((_data, stats, module_graph)) => {
    //         // Verify module isolation worked
    //         assert_eq!(module_graph.modules.len(), 2);
    //         assert!(stats.include_count > 0);
    //     }
    //     Err(e) => {
    //         // If compilation fails, make sure it's not due to module isolation issues
    //         let error_msg = format!("{}", e);
    //         assert!(!error_msg.contains("Circular"), "Should not have circular dependency errors");
    //         // Other parsing errors are acceptable for now as we're testing module isolation specifically
    //     }
    // }
    
    // TODO: Re-enable when compile function is available
    // // Verify output file was created (if compilation succeeded)
    // if output_path.exists() {
    //     let output_data = fs::read(&output_path).unwrap();
    //     assert!(!output_data.is_empty(), "Output file should not be empty");
    // }
}